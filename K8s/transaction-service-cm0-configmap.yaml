apiVersion: v1
data:
  .gitignore: |-
    # .gitignore for .NET Transaction Service

    # .NET Build Output
    bin/
    obj/
    out/
    [Dd]ebug/
    [Rr]elease/
    x64/
    x86/
    [Ww][Ii][Nn]32/
    [Aa][Rr][Mm]/
    [Aa][Rr][Mm]64/
    bld/
    [Bb]uild/
    msbuild.log
    msbuild.err
    msbuild.wrn

    # Visual Studio files
    .vs/
    *.user
    *.userosscache
    *.suo
    *.userprefs
    *.dbmdl
    *.dbproj.schemaview
    *.jfm
    *.pfx
    *.publishsettings
    orleans.codegen.cs

    # Rider IDE files
    .idea/
    *.sln.iml
    .idea/
    *.DotSettings.user

    # VS Code files
    .vscode/
    !.vscode/settings.json
    !.vscode/tasks.json
    !.vscode/launch.json
    !.vscode/extensions.json
    !.vscode/*.code-snippets

    # Docker
    .dockerignore
    **/.docker/data/
    .env

    # Database files
    *.mdf
    *.ldf
    *.ndf
    **/[Mm]igrations/

    # Logs
    logs/
    *.log
    npm-debug.log*

    # Environment files
    .env
    .env.local
    .env.development
    .env.test
    .env.production

    # Test Results
    TestResults/
    [Tt]est[Rr]esult*/
    coverage/
    coverage*.json
    coverage*.xml
    coverage*.info

    # NuGet Packages
    *.nupkg
    **/[Pp]ackages/*
    !**/[Pp]ackages/build/
    *.nuget.props
    *.nuget.targets

    # User-specific files
    *.rsuser
    *.dtbcache.json

    # Miscellaneous
    .DS_Store
    Thumbs.db
    node_modules/
    .sass-cache/
    *.orig
    *.swp
    *.*~
    *~
    _UpgradeReport_Files/
    Backup*/
    UpgradeLog*.XML
    UpgradeLog*.htm
    ServiceFabricBackup/
    *.rptproj.bak
    *.ncrunchsolution
    *.ncrunchproject
    nCrunchTemp_*

    # Local SSL Certificate
    *.pfx
    *.crt
    *.key
    *.pem

    # Generated files
    Generated_Code/
    _site/

    # SQL Server files
    *.mdf
    *.ldf
    *.ndf

    # MySQL data files
    /mysql-data/

    # RabbitMQ data
    /rabbitmq-data/
  Dockerfile: |-
    FROM mcr.microsoft.com/dotnet/sdk:9.0

    WORKDIR /app

    # Copy csproj and restore dependencies (cached layer)
    COPY *.csproj ./
    RUN dotnet restore

    # Copy the rest of the source code
    COPY . ./

    # Expose ports for the application and Prometheus metrics
    EXPOSE 80
    EXPOSE 9091

    # Entrypoint to run dotnet watch
    ENTRYPOINT ["sh", "-c", "dotnet watch run --urls http://*:80"]
  Program.cs: "using System;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.IdentityModel.Tokens;\nusing Microsoft.OpenApi.Models;\nusing Polly;\nusing Prometheus;\nusing TransactionService.Infrastructure.Data;\nusing TransactionService.Infrastructure.Data.Repositories;\nusing TransactionService.Infrastructure.Messaging.RabbitMQ;\nusing TransactionService.Models;\nusing TransactionService.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n\n// Configure Swagger\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo { \n        Title = \"Transaction API\", \n        Version = \"v1\",\n        Description = \"API for managing banking transactions\",\n        Contact = new OpenApiContact\n        {\n            Name = \"Banking App Team\",\n            Email = \"support@bankingapp.com\"\n        }\n    });\n    \n    c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme\n    {\n        Description = \"JWT Authorization header using the Bearer scheme. Example: \\\"Authorization: Bearer {token}\\\"\",\n        Name = \"Authorization\",\n        In = ParameterLocation.Header,\n        Type = SecuritySchemeType.Http,\n        Scheme = \"bearer\",\n        BearerFormat = \"JWT\"\n    });\n    \n    c.AddSecurityRequirement(new OpenApiSecurityRequirement\n    {\n        {\n            new OpenApiSecurityScheme\n            {\n                Reference = new OpenApiReference\n                {\n                    Type = ReferenceType.SecurityScheme,\n                    Id = \"Bearer\"\n                }\n            },\n            Array.Empty<string>()\n        }\n    });\n});\n\nvar connectionString = string.Format(\"server={0};port={1};database={2};user={3};password={4};SslMode=Required\",\n    builder.Configuration.GetValue<string>(\"MYSQL_HOST\"),\n    builder.Configuration.GetValue<string>(\"MYSQL_PORT\"),\n    builder.Configuration.GetValue<string>(\"MYSQL_DATABASE\"),\n    builder.Configuration.GetValue<string>(\"MYSQL_USER\"),\n    builder.Configuration.GetValue<string>(\"MYSQL_PASSWORD\"));\n\n// Register the DbContext with MySQL configuration\nbuilder.Services.AddDbContext<TransactionDbContext>(options =>\n    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString),\n        mySqlOptions => mySqlOptions.EnableStringComparisonTranslations())\n);\n// Configure RabbitMQ\nvar rabbitMQConfig = new RabbitMQConfiguration\n{\n    HostName = builder.Configuration[\"RABBITMQ_HOST\"] ?? \"rabbitmq\",\n    Port = int.Parse(builder.Configuration[\"RABBITMQ_PORT\"] ?? \"5672\"),\n    UserName = builder.Configuration[\"RABBITMQ_USERNAME\"] ?? \"guest\",\n    Password = builder.Configuration[\"RABBITMQ_PASSWORD\"] ?? \"guest\",\n    VirtualHost = builder.Configuration[\"RABBITMQ_VHOST\"] ?? \"/\",\n};\nbuilder.Services.AddSingleton(rabbitMQConfig);\nbuilder.Services.AddSingleton<IRabbitMQClient, RabbitMqClient>();\n\n// Configure Authentication\nbuilder.Services.AddAuthentication(options =>\n{\n    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n})\n.AddJwtBearer(options =>\n{\n    options.TokenValidationParameters = new TokenValidationParameters\n    {\n        ValidateIssuer = true,\n        ValidateAudience = true,\n        ValidateLifetime = true,\n        ValidateIssuerSigningKey = true,\n        ValidIssuer = builder.Configuration.GetValue<string>(\"JWT_ISSUER\") ?? throw new InvalidOperationException(\"JWT_ISSUER must be configured\"),\n        ValidAudience = builder.Configuration.GetValue<string>(\"JWT_AUDIENCE\") ?? throw new InvalidOperationException(\"JWT_AUDIENCE must be configured\"),\n        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\n            builder.Configuration.GetValue<string>(\"JWT_KEY\") ?? throw new InvalidOperationException(\"JWT_KEY must be configured\")))\n    };\n});\n\n// Configure HttpClient for User Account Service\nvar serviceToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0cmFuc2FjdGlvbi1zZXJ2aWNlIiwicm9sZSI6InNlcnZpY2UiLCJqdGkiOiJjNGEwMzRjYy1iMDE4LTQxYTYtOTNmMi02MDc5MDQ1MWU1OWEiLCJpc3MiOiJCYW5raW5nQXBwIiwic2NvcGVzIjpbInJlYWQ6YWNjb3VudHMiLCJ1cGRhdGU6YWNjb3VudC1iYWxhbmNlIl0sImV4cCI6MTc2MTI0NjM0NSwiYXVkIjoiVXNlckFjY291bnRBUEkifQ.xiE7sJOYZWizg-cvk_yKya4-vfaXUV9BDTXaJx5QgJE\"\n    ?? throw new InvalidOperationException(\"TRANSACTION_SERVICE_TOKEN is missing\");\nvar userAccountServiceUrl = builder.Configuration[\"Services:UserAccountService\"];\nConsole.WriteLine($\"Configuring HttpClient for UserAccountClientService: URL={userAccountServiceUrl}, Token={serviceToken}\");\nif (string.IsNullOrWhiteSpace(userAccountServiceUrl) || !Uri.TryCreate(userAccountServiceUrl, UriKind.Absolute, out var uri))\n{\n    throw new InvalidOperationException($\"Invalid or missing Services:UserAccountService URL: {userAccountServiceUrl ?? \"NULL\"}\");\n}\nbuilder.Services.AddHttpClient<UserAccountClientService>(client =>\n{\n    client.BaseAddress = uri;\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", serviceToken);\n    client.Timeout = TimeSpan.FromSeconds(30);\n}).AddTransientHttpErrorPolicy(builder =>\n    builder.WaitAndRetryAsync(3, attempt => TimeSpan.FromSeconds(Math.Pow(2, attempt))));\n\n// Register repositories\nbuilder.Services.AddScoped<ITransactionRepository, TransactionRepository>();\n\n// Register services\nbuilder.Services.AddScoped<ITransactionService, TransactionService.Services.TransactionService>();\n\n// Create Prometheus metrics\nvar transactionCounter = Metrics.CreateCounter(\n    \"transactions_total\",\n    \"Total number of transactions\",\n    new CounterConfiguration { LabelNames = new[] { \"type\", \"status\" } }\n);\n\nvar transactionDurationHistogram = Metrics.CreateHistogram(\n    \"transaction_duration_seconds\",\n    \"Transaction processing duration in seconds\",\n    new HistogramConfiguration\n    {\n        LabelNames = new[] { \"type\" },\n        Buckets = new double[] { 0.1, 0.5, 1, 2, 5, 10 }\n    }\n);\n\n// Register metrics\nbuilder.Services.AddSingleton(transactionCounter);\nbuilder.Services.AddSingleton(transactionDurationHistogram);\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(c => \n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Transaction API v1\");\n        c.RoutePrefix = string.Empty; // To serve the Swagger UI at the app's root\n    });\n}\nelse\n{\n    // Production configuration\n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Transaction API v1\");\n        c.RoutePrefix = \"api-docs\";\n    });\n}\n\napp.UseMetricServer();\napp.UseHttpMetrics();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n"
  README.md: "### Step 1: Set Up the Project Structure\n\n1. **Create a New Directory for the Project**:\n   ```bash\n   mkdir TransactionService\n   cd TransactionService\n   ```\n\n2. **Initialize a New C# Project**:\n   Use the .NET CLI to create a new web API project.\n   ```bash\n   dotnet new webapi -n TransactionService\n   cd TransactionService\n   ```\n\n### Step 2: Add Required Dependencies\n\n1. **Add NuGet Packages**:\n   You will need several packages for RabbitMQ, Entity Framework Core, MySQL, and JWT authentication. Run the following commands:\n   ```bash\n   dotnet add package Microsoft.EntityFrameworkCore\n   dotnet add package Pomelo.EntityFrameworkCore.MySql\n   dotnet add package RabbitMQ.Client\n   dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer\n   ```\n\n### Step 3: Set Up the Database Context\n\n1. **Create a New Folder for Data**:\n   ```bash\n   mkdir Data\n   ```\n\n2. **Create a Transaction Model**:\n   Create a new file `Transaction.cs` in the `Data` folder:\n   ```csharp\n   public class Transaction\n   {\n       public int Id { get; set; }\n       public string FromAccount { get; set; }\n       public string ToAccount { get; set; }\n       public decimal Amount { get; set; }\n       public string Status { get; set; } // e.g., \"pending\", \"approved\", \"declined\"\n       public DateTime CreatedAt { get; set; }\n   }\n   ```\n\n3. **Create the ApplicationDbContext**:\n   Create a new file `ApplicationDbContext.cs` in the `Data` folder:\n   ```csharp\n   using Microsoft.EntityFrameworkCore;\n\n   public class ApplicationDbContext : DbContext\n   {\n       public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }\n\n       public DbSet<Transaction> Transactions { get; set; }\n   }\n   ```\n\n### Step 4: Configure the Database Connection\n\n1. **Update `appsettings.json`**:\n   Add your MySQL connection string:\n   ```json\n   {\n       \"ConnectionStrings\": {\n           \"DefaultConnection\": \"Server=localhost;Database=transaction_db;User=root;Password=yourpassword;\"\n       },\n       // other settings...\n   }\n   ```\n\n2. **Configure Services in `Startup.cs`**:\n   Update the `ConfigureServices` method:\n   ```csharp\n   public void ConfigureServices(IServiceCollection services)\n   {\n       services.AddDbContext<ApplicationDbContext>(options =>\n           options.UseMySql(Configuration.GetConnectionString(\"DefaultConnection\"), \n           new MySqlServerVersion(new Version(8, 0, 21)))); // Adjust version as necessary\n\n       services.AddControllers();\n       services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n           .AddJwtBearer(options =>\n           {\n               options.TokenValidationParameters = new TokenValidationParameters\n               {\n                   ValidateIssuer = true,\n                   ValidateAudience = true,\n                   ValidateLifetime = true,\n                   ValidateIssuerSigningKey = true,\n                   // Set your issuer and audience here\n                   ValidIssuer = \"yourissuer\",\n                   ValidAudience = \"youraudience\",\n                   IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"your_secret_key\"))\n               };\n           });\n   }\n   ```\n\n### Step 5: Implement Transaction Processing Logic\n\n1. **Create a Transaction Controller**:\n   Create a new folder `Controllers` and add a file `TransactionController.cs`:\n   ```csharp\n   using Microsoft.AspNetCore.Mvc;\n   using Microsoft.EntityFrameworkCore;\n   using RabbitMQ.Client;\n   using System.Text;\n\n   [Route(\"api/[controller]\")]\n   [ApiController]\n   public class TransactionController : ControllerBase\n   {\n       private readonly ApplicationDbContext _context;\n\n       public TransactionController(ApplicationDbContext context)\n       {\n           _context = context;\n       }\n\n       [HttpPost(\"transfer\")]\n       public async Task<IActionResult> Transfer([FromBody] Transaction transaction)\n       {\n           // Validate and process the transaction\n           transaction.Status = \"pending\";\n           transaction.CreatedAt = DateTime.UtcNow;\n\n           _context.Transactions.Add(transaction);\n           await _context.SaveChangesAsync();\n\n           // Publish to RabbitMQ\n           var factory = new ConnectionFactory() { HostName = \"localhost\" };\n           using var connection = factory.CreateConnection();\n           using var channel = connection.CreateModel();\n           channel.QueueDeclare(queue: \"CheckFraud\", durable: false, exclusive: false, autoDelete: false, arguments: null);\n\n           var message = JsonSerializer.Serialize(transaction);\n           var body = Encoding.UTF8.GetBytes(message);\n           channel.BasicPublish(exchange: \"\", routingKey: \"CheckFraud\", basicProperties: null, body: body);\n\n           return Ok(transaction);\n       }\n   }\n   ```\n\n### Step 6: Configure RabbitMQ\n\n1. **Ensure RabbitMQ is Running**:\n   Make sure you have RabbitMQ installed and running on your local machine.\n\n### Step 7: Run Migrations\n\n1. **Add Migrations**:\n   Run the following commands to create the database schema:\n   ```bash\n   dotnet ef migrations add InitialCreate\n   dotnet ef database update\n   ```\n\n### Step 8: Run the Application\n\n1. **Run the Application**:\n   ```bash\n   dotnet run\n   ```\n\n### Step 9: Test the API\n\nYou can use tools like Postman or curl to test the API. For example, to initiate a transfer, send a POST request to `http://localhost:5000/api/transaction/transfer` with a JSON body:\n```json\n{\n    \"fromAccount\": \"account1\",\n    \"toAccount\": \"account2\",\n    \"amount\": 1500\n}\n```\n\n### Conclusion\n\nYou have now set up a basic Transaction Service that can process transfers, store them in a MySQL database, and communicate with RabbitMQ for fraud detection. You can further enhance this service by implementing additional features such as error handling, logging, and more complex transaction processing logic as described in the README file."
  TransactionService.csproj: "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <NoWarn>$(NoWarn);NU1603;NU1605</NoWarn>\n    <InvariantGlobalization>true</InvariantGlobalization>\n    \n    <!-- Prevent duplicate assembly attributes -->\n    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\n    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>\n    <UserSecretsId>dad289ed-6837-4517-9095-53814d69fdf8</UserSecretsId>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <!-- Use the exact same version for all EF Core packages -->\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"9.0.0-preview.3.24172.5\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"9.0.0-preview.3.24172.5\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"9.0.0-preview.1.24081.2\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" Version=\"9.0.0-preview.1.24081.2\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"9.0.0-preview.1.24081.2\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.Extensions.Http.Polly\" Version=\"9.0.0-preview.1.24081.5\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.20.72\" />\n    <PackageReference Include=\"MySql.EntityFrameworkCore\" Version=\"9.0.3\" />\n    <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"9.0.0-preview.1\" />\n    <PackageReference Include=\"prometheus-net\" Version=\"8.2.1\" />\n    <PackageReference Include=\"prometheus-net.AspNetCore\" Version=\"8.2.1\" />\n    <PackageReference Include=\"RabbitMQ.Client\" Version=\"6.8.1\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.5.0\" />\n    <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"7.3.1\" />\n    <PackageReference Include=\"MySqlConnector\" Version=\"2.3.5\" />\n    <PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n  </ItemGroup>\n\n  <!-- Disable treating warnings as errors -->\n  <PropertyGroup>\n    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\n  </PropertyGroup>\n\n</Project>"
  TransactionService.sln: "\uFEFF\x4D\x69\x63\x72\x6F\x73\x6F\x66\x74\x20\x56\x69\x73\x75\x61\x6C\x20\x53\x74\x75\x64\x69\x6F\x20\x53\x6F\x6C\x75\x74\x69\x6F\x6E\x20\x46\x69\x6C\x65\x2C\x20\x46\x6F\x72\x6D\x61\x74\x20\x56\x65\x72\x73\x69\x6F\x6E\x20\x31\x32\x2E\x30\x30\n\x23\x20\x56\x69\x73\x75\x61\x6C\x20\x53\x74\x75\x64\x69\x6F\x20\x56\x65\x72\x73\x69\x6F\x6E\x20\x31\x37\n\x56\x69\x73\x75\x61\x6C\x53\x74\x75\x64\x69\x6F\x56\x65\x72\x73\x69\x6F\x6E\x20\x3D\x20\x31\x37\x2E\x30\x2E\x33\x31\x39\x30\x33\x2E\x35\x39\n\x4D\x69\x6E\x69\x6D\x75\x6D\x56\x69\x73\x75\x61\x6C\x53\x74\x75\x64\x69\x6F\x56\x65\x72\x73\x69\x6F\x6E\x20\x3D\x20\x31\x30\x2E\x30\x2E\x34\x30\x32\x31\x39\x2E\x31\n\x50\x72\x6F\x6A\x65\x63\x74\x28\"\x7B\x46\x41\x45\x30\x34\x45\x43\x30\x2D\x33\x30\x31\x46\x2D\x31\x31\x44\x33\x2D\x42\x46\x34\x42\x2D\x30\x30\x43\x30\x34\x46\x37\x39\x45\x46\x42\x43\x7D\"\x29\x20\x3D\x20\"\x54\x72\x61\x6E\x73\x61\x63\x74\x69\x6F\x6E\x53\x65\x72\x76\x69\x63\x65\"\x2C\x20\"\x54\x72\x61\x6E\x73\x61\x63\x74\x69\x6F\x6E\x53\x65\x72\x76\x69\x63\x65\x2E\x63\x73\x70\x72\x6F\x6A\"\x2C\x20\"\x7B\x39\x34\x39\x42\x31\x35\x34\x37\x2D\x43\x33\x42\x37\x2D\x34\x36\x36\x35\x2D\x38\x33\x46\x38\x2D\x43\x43\x39\x30\x45\x35\x32\x44\x36\x37\x34\x46\x7D\"\n\x45\x6E\x64\x50\x72\x6F\x6A\x65\x63\x74\n\x50\x72\x6F\x6A\x65\x63\x74\x28\"\x7B\x46\x41\x45\x30\x34\x45\x43\x30\x2D\x33\x30\x31\x46\x2D\x31\x31\x44\x33\x2D\x42\x46\x34\x42\x2D\x30\x30\x43\x30\x34\x46\x37\x39\x45\x46\x42\x43\x7D\"\x29\x20\x3D\x20\"\x54\x72\x61\x6E\x73\x61\x63\x74\x69\x6F\x6E\x53\x65\x72\x76\x69\x63\x65\x2E\x54\x65\x73\x74\x73\"\x2C\x20\"\x54\x72\x61\x6E\x73\x61\x63\x74\x69\x6F\x6E\x53\x65\x72\x76\x69\x63\x65\x2E\x54\x65\x73\x74\x73\\\x54\x72\x61\x6E\x73\x61\x63\x74\x69\x6F\x6E\x53\x65\x72\x76\x69\x63\x65\x2E\x54\x65\x73\x74\x73\x2E\x63\x73\x70\x72\x6F\x6A\"\x2C\x20\"\x7B\x31\x36\x33\x32\x33\x42\x45\x35\x2D\x43\x44\x43\x39\x2D\x34\x37\x35\x44\x2D\x38\x37\x45\x37\x2D\x36\x43\x32\x36\x37\x37\x35\x32\x38\x31\x41\x34\x7D\"\n\x45\x6E\x64\x50\x72\x6F\x6A\x65\x63\x74\n\x47\x6C\x6F\x62\x61\x6C\n\x20\x20\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\x28\x53\x6F\x6C\x75\x74\x69\x6F\x6E\x43\x6F\x6E\x66\x69\x67\x75\x72\x61\x74\x69\x6F\x6E\x50\x6C\x61\x74\x66\x6F\x72\x6D\x73\x29\x20\x3D\x20\x70\x72\x65\x53\x6F\x6C\x75\x74\x69\x6F\x6E\n\x20\x20\x20\x20\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\x20\x3D\x20\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\x20\x3D\x20\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x45\x6E\x64\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\n\x20\x20\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\x28\x50\x72\x6F\x6A\x65\x63\x74\x43\x6F\x6E\x66\x69\x67\x75\x72\x61\x74\x69\x6F\x6E\x50\x6C\x61\x74\x66\x6F\x72\x6D\x73\x29\x20\x3D\x20\x70\x6F\x73\x74\x53\x6F\x6C\x75\x74\x69\x6F\x6E\n\x20\x20\x20\x20\x7B\x39\x34\x39\x42\x31\x35\x34\x37\x2D\x43\x33\x42\x37\x2D\x34\x36\x36\x35\x2D\x38\x33\x46\x38\x2D\x43\x43\x39\x30\x45\x35\x32\x44\x36\x37\x34\x46\x7D\x2E\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x41\x63\x74\x69\x76\x65\x43\x66\x67\x20\x3D\x20\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x7B\x39\x34\x39\x42\x31\x35\x34\x37\x2D\x43\x33\x42\x37\x2D\x34\x36\x36\x35\x2D\x38\x33\x46\x38\x2D\x43\x43\x39\x30\x45\x35\x32\x44\x36\x37\x34\x46\x7D\x2E\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x42\x75\x69\x6C\x64\x2E\x30\x20\x3D\x20\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x7B\x39\x34\x39\x42\x31\x35\x34\x37\x2D\x43\x33\x42\x37\x2D\x34\x36\x36\x35\x2D\x38\x33\x46\x38\x2D\x43\x43\x39\x30\x45\x35\x32\x44\x36\x37\x34\x46\x7D\x2E\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x41\x63\x74\x69\x76\x65\x43\x66\x67\x20\x3D\x20\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x7B\x39\x34\x39\x42\x31\x35\x34\x37\x2D\x43\x33\x42\x37\x2D\x34\x36\x36\x35\x2D\x38\x33\x46\x38\x2D\x43\x43\x39\x30\x45\x35\x32\x44\x36\x37\x34\x46\x7D\x2E\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x42\x75\x69\x6C\x64\x2E\x30\x20\x3D\x20\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x7B\x31\x36\x33\x32\x33\x42\x45\x35\x2D\x43\x44\x43\x39\x2D\x34\x37\x35\x44\x2D\x38\x37\x45\x37\x2D\x36\x43\x32\x36\x37\x37\x35\x32\x38\x31\x41\x34\x7D\x2E\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x41\x63\x74\x69\x76\x65\x43\x66\x67\x20\x3D\x20\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x7B\x31\x36\x33\x32\x33\x42\x45\x35\x2D\x43\x44\x43\x39\x2D\x34\x37\x35\x44\x2D\x38\x37\x45\x37\x2D\x36\x43\x32\x36\x37\x37\x35\x32\x38\x31\x41\x34\x7D\x2E\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x42\x75\x69\x6C\x64\x2E\x30\x20\x3D\x20\x44\x65\x62\x75\x67\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x7B\x31\x36\x33\x32\x33\x42\x45\x35\x2D\x43\x44\x43\x39\x2D\x34\x37\x35\x44\x2D\x38\x37\x45\x37\x2D\x36\x43\x32\x36\x37\x37\x35\x32\x38\x31\x41\x34\x7D\x2E\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x41\x63\x74\x69\x76\x65\x43\x66\x67\x20\x3D\x20\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x20\x20\x7B\x31\x36\x33\x32\x33\x42\x45\x35\x2D\x43\x44\x43\x39\x2D\x34\x37\x35\x44\x2D\x38\x37\x45\x37\x2D\x36\x43\x32\x36\x37\x37\x35\x32\x38\x31\x41\x34\x7D\x2E\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\x2E\x42\x75\x69\x6C\x64\x2E\x30\x20\x3D\x20\x52\x65\x6C\x65\x61\x73\x65\x7C\x41\x6E\x79\x20\x43\x50\x55\n\x20\x20\x45\x6E\x64\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\n\x20\x20\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\x28\x53\x6F\x6C\x75\x74\x69\x6F\x6E\x50\x72\x6F\x70\x65\x72\x74\x69\x65\x73\x29\x20\x3D\x20\x70\x72\x65\x53\x6F\x6C\x75\x74\x69\x6F\x6E\n\x20\x20\x20\x20\x48\x69\x64\x65\x53\x6F\x6C\x75\x74\x69\x6F\x6E\x4E\x6F\x64\x65\x20\x3D\x20\x46\x41\x4C\x53\x45\n\x20\x20\x45\x6E\x64\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\n\x20\x20\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\x28\x50\x72\x6F\x6A\x65\x63\x74\x44\x65\x70\x65\x6E\x64\x65\x6E\x63\x69\x65\x73\x29\x20\x3D\x20\x70\x6F\x73\x74\x53\x6F\x6C\x75\x74\x69\x6F\x6E\n\x20\x20\x20\x20\x7B\x31\x36\x33\x32\x33\x42\x45\x35\x2D\x43\x44\x43\x39\x2D\x34\x37\x35\x44\x2D\x38\x37\x45\x37\x2D\x36\x43\x32\x36\x37\x37\x35\x32\x38\x31\x41\x34\x7D\x20\x3D\x20\x7B\x39\x34\x39\x42\x31\x35\x34\x37\x2D\x43\x33\x42\x37\x2D\x34\x36\x36\x35\x2D\x38\x33\x46\x38\x2D\x43\x43\x39\x30\x45\x35\x32\x44\x36\x37\x34\x46\x7D\n\x20\x20\x45\x6E\x64\x47\x6C\x6F\x62\x61\x6C\x53\x65\x63\x74\x69\x6F\x6E\n\x45\x6E\x64\x47\x6C\x6F\x62\x61\x6C\n"
  appsettings.Development.json: |
    {
      "RabbitMQ": {
        "HostName": "localhost",
        "Port": 5672,
        "UserName": "guest",
        "Password": "guest",
        "VirtualHost": "/"
      },

      "Logging": {
        "LogLevel": {
          "Default": "Information",
          "Microsoft.AspNetCore": "Warning"
        }
      },
      "AllowedHosts": "*"
    }
  appsettings.json: "{\n   \"RabbitMQ\": {\n     \"HostName\": \"localhost\",\n     \"Port\": 5672,\n     \"UserName\": \"guest\",\n     \"Password\": \"guest\",\n     \"VirtualHost\": \"/\"\n   },\n   \n   \"Logging\": {\n     \"LogLevel\": {\n       \"Default\": \"Information\",\n       \"Microsoft.AspNetCore\": \"Warning\"\n     }\n   },\n   \"AllowedHosts\": \"*\"\n }\n"
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: transaction-service
  name: transaction-service-cm0

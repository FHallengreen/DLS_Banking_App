apiVersion: v1
data:
  02-init-test-data.sql: |
    -- Sample transaction data for testing

    -- Insert sample transactions
    INSERT INTO `transaction_db`.`Transactions`
    (`Id`, `TransferId`, `FromAccount`, `ToAccount`, `Amount`, `Status`, `CreatedAt`, `UpdatedAt`)
    VALUES
        (UUID(), 'TRX-001', 'ACC123', 'ACC456', 100.00, 'approved', NOW(), NOW());

    INSERT INTO `transaction_db`.`Transactions`
    (`Id`, `TransferId`, `FromAccount`, `ToAccount`, `Amount`, `Status`, `CreatedAt`, `UpdatedAt`)
    VALUES
        (UUID(), 'TRX-002', 'ACC456', 'ACC123', 50.00, 'approved', NOW(), NOW());

    INSERT INTO `transaction_db`.`Transactions`
    (`Id`, `TransferId`, `FromAccount`, `ToAccount`, `Amount`, `Status`, `CreatedAt`, `UpdatedAt`)
    VALUES
        (UUID(), 'TRX-003', 'ACC123', 'ACC789', 200.00, 'pending', NOW(), NULL);

    INSERT INTO `transaction_db`.`Transactions`
    (`Id`, `TransferId`, `FromAccount`, `ToAccount`, `Amount`, `Status`, `CreatedAt`, `UpdatedAt`)
    VALUES
        (UUID(), 'TRX-004', 'ACC789', 'ACC456', 75.50, 'declined', NOW(), NOW());

    -- Insert transaction logs for the transactions
    -- Get the IDs of inserted transactions first
    SET @trx1_id = (SELECT `Id` FROM `transaction_db`.`Transactions` WHERE `TransferId` = 'TRX-001');
    SET @trx2_id = (SELECT `Id` FROM `transaction_db`.`Transactions` WHERE `TransferId` = 'TRX-002');
    SET @trx3_id = (SELECT `Id` FROM `transaction_db`.`Transactions` WHERE `TransferId` = 'TRX-003');
    SET @trx4_id = (SELECT `Id` FROM `transaction_db`.`Transactions` WHERE `TransferId` = 'TRX-004');

    -- Insert logs for each transaction
    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx1_id, 'status_change', 'Transaction created with status: pending', DATE_SUB(NOW(), INTERVAL 2 HOUR));

    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx1_id, 'fraud_check', 'Fraud check passed', DATE_SUB(NOW(), INTERVAL 1 HOUR));

    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx1_id, 'status_change', 'Transaction status updated to: approved', NOW());

    -- Logs for transaction 2
    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx2_id, 'status_change', 'Transaction created with status: pending', DATE_SUB(NOW(), INTERVAL 3 HOUR));

    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx2_id, 'fraud_check', 'Fraud check passed', DATE_SUB(NOW(), INTERVAL 2 HOUR));

    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx2_id, 'status_change', 'Transaction status updated to: approved', DATE_SUB(NOW(), INTERVAL 2 HOUR));

    -- Logs for transaction 3 (pending)
    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx3_id, 'status_change', 'Transaction created with status: pending', DATE_SUB(NOW(), INTERVAL 30 MINUTE));

    -- Logs for transaction 4 (declined)
    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx4_id, 'status_change', 'Transaction created with status: pending', DATE_SUB(NOW(), INTERVAL 4 HOUR));

    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx4_id, 'fraud_check', 'Possible fraud detected: unusual location', DATE_SUB(NOW(), INTERVAL 3 HOUR));

    INSERT INTO `transaction_db`.`TransactionLogs`
    (`Id`, `TransactionId`, `LogType`, `Message`, `CreatedAt`)
    VALUES
        (UUID(), @trx4_id, 'status_change', 'Transaction status updated to: declined', DATE_SUB(NOW(), INTERVAL 3 HOUR));
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: mysql-transaction
  name: mysql-transaction-cm2
